// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tour.Infrastructure.Data;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PackageContext))]
    [Migration("20200301091030_FixedIntialize")]
    partial class FixedIntialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tour.Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("UX_City_Title");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Hotel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("HotelInfoId");

                    b.Property<long>("PackageId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,1)");

                    b.HasKey("Id");

                    b.HasIndex("HotelInfoId");

                    b.HasIndex("PackageId");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("Tour.Domain.Entities.HotelInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location");

                    b.Property<decimal>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("decimal(4, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Stars")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<long?>("cityId");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("UX_HotelInfo_Title");

                    b.HasIndex("cityId");

                    b.ToTable("HotelInfos");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Package", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DestinationCityId");

                    b.Property<DateTime>("EndDate");

                    b.Property<long>("OriginCityId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("SupportPhone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("DestinationCityId");

                    b.HasIndex("OriginCityId");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("UX_Package_Title");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Transportation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FromDate");

                    b.Property<long>("PackageId");

                    b.Property<DateTime>("ToDate");

                    b.Property<long>("TransportationInfoId");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("TransportationInfoId");

                    b.ToTable("Transportation");
                });

            modelBuilder.Entity("Tour.Domain.Entities.TransportationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasName("UX_TransportationInfo_CompanyName");

                    b.ToTable("TransportationInfos");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Hotel", b =>
                {
                    b.HasOne("Tour.Domain.Entities.HotelInfo", "HotelInformation")
                        .WithMany()
                        .HasForeignKey("HotelInfoId")
                        .HasConstraintName("FK_Hotel_HotelInfoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tour.Domain.Entities.Package")
                        .WithMany("Hotels")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK_Hotel_PackageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tour.Domain.Entities.HotelInfo", b =>
                {
                    b.HasOne("Tour.Domain.Entities.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId");
                });

            modelBuilder.Entity("Tour.Domain.Entities.Package", b =>
                {
                    b.HasOne("Tour.Domain.Entities.City", "DestinationCity")
                        .WithMany()
                        .HasForeignKey("DestinationCityId")
                        .HasConstraintName("FK_Package_DestinationCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tour.Domain.Entities.City", "OriginCity")
                        .WithMany()
                        .HasForeignKey("OriginCityId")
                        .HasConstraintName("FK_Package_OriginCityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tour.Domain.Entities.Transportation", b =>
                {
                    b.HasOne("Tour.Domain.Entities.Package")
                        .WithMany("Transportations")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK_Transportation_PackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tour.Domain.Entities.TransportationInfo", "TransportationInformation")
                        .WithMany()
                        .HasForeignKey("TransportationInfoId")
                        .HasConstraintName("FK_Transportation_TransportationInfoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
